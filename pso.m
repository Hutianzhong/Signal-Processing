function result = pso(high,f)
tic   %该函数表示计时开始  
%------给定初始化条件----------------------------------------------  
c1 = 1.4962;             %加速常数即学习因子1  
c2 = 1.4962;             %加速常数即学习因子2  
w = 0.7298;              %惯性权重  
MaxDT = 1000;           %最大迭代次数  
D = high;                  %搜索空间维数（测试函数sphere中未知数个数）  
N = 40;                  %初始化群体个体数目  
eps = 10^(-7);           %设置精度(在已知最小值时候用)  
%------初始化种群的个体(可以在这里限定位置和速度的范围)------------  
for i = 1 : N  
    for j = 1 : D  
        x(i,j) = randn;  %产生一个服从正态分布的随机数作为初始化位置  
        v(i,j) = randn;  %产生一个服从正态分布的随机数作为初始化速度  
    end  
end  
%------先计算各个粒子的适应度，并初始化个体最优位置y和全局最优位置Pg--------  
for i = 1 : N  
    p(i) = fun(x(i,:),f); %计算适应度，测试函数为fun 
    y(i,:) = x(i,:); %初始化个体最优位置y为在时间步t=0时的粒子位置  
end  
Pg = x(1,:);  %Pg为全局最优位置  
for i = 2 : N  
    if fun(x(i,:),f) > fun(Pg,f)  
        Pg=x(i,:);%更新全局最优位置  
    end  
end  
%------进入主要循环，按照公式依次迭代，直到满足精度要求------------  
for t = 1 : MaxDT  
    for i = 1 : N  
        v(i,:)=w * v(i,:) + c1 * rand * (y(i,:) - x(i,:)) + c2 * rand * (Pg - x(i,:));  
        x(i,:)=x(i,:) + v(i,:);  
        if fun(x(i,:),f) > p(i)  
            p(i) = fun(x(i,:),f);%更新适应度  
            y(i,:) = x(i,:);%更新个体最佳位置  
        end  
        if p(i) > fun(Pg,f)  
            Pg = y(i,:);%更新群体最佳位置  
        end  
    end  
    Pbest(t) = fun(Pg,f);%保存每一代的群体最佳位置  
end  
toc %该函数表示计时结束  
%------最后给出计算结果  
   
disp('函数的全局最优位置为：')  
for i=1:D  
    fprintf('x(%d)=%s\n',i,Pg(i));  
end  
fprintf('最后得到的优化极值为：%s\n',fun(Pg,f));  
disp('*************************************************************') 

result = one(Pg / sum(Pg));
end